message("Run detect script")

# Default C++ and C standard
if (NOT DEFINED CMAKE_CXX_STANDARD)
    message(STATUS "No C++ version specified, defaulting to C++20")
    set(CMAKE_CXX_STANDARD 20)
endif ()

if (NOT DEFINED CMAKE_C_STANDARD)
    message(STATUS "No C version specified, defaulting to C17")
    set(CMAKE_C_STANDARD 17)
endif ()

# Detect endianness
test_big_endian(LIBDBG_BIG_ENDIAN)
if (LIBDBG_BIG_ENDIAN)
    message(STATUS "Detected big endian")
    add_compile_definitions(BIG_ENDIAN)
else()
    message(STATUS "Detected little endian")
    add_compile_definitions(LITTLE_ENDIAN)
endif()

# Detect architecture
if (CMAKE_SYSTEM_PROCESSOR MATCHES "[aA][rR][mM]64|[aA][aA]rch64")
    add_compile_definitions(ARCH_ARM64 ARCH_ARM64)
    message(STATUS "Detected ARM64 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[aA][rR][mM]")
    add_compile_definitions(ARCH_ARM)
    message(STATUS "Detected ARM based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[xX]86[_\-]64|[xX]64|[aA][mM][dD]64")
    add_compile_definitions(ARCH_X86_64 ARCH_X86)
    message(STATUS "Detected x86_64 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[xX]86|i[3456]86")
    add_compile_definitions(ARCH_X86)
    message(STATUS "Detected x86 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[rR]isc[vV]64")
    add_compile_definitions(ARCH_RISCV64 ARCH_RISCV)
    message(STATUS "Detected RISC-V64 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[rR]isc[vV]")
    add_compile_definitions(ARCH_RISCV)
    message(STATUS "Detected RISC-V based processor")
else ()
    message(FATAL_ERROR "Unsupported architecture '${CMAKE_SYSTEM_PROCESSOR}'")
endif ()

# Detect compiler
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(COMPILER_CLANG TRUE)
    add_compile_definitions(COMPILER_CLANG)
    message(STATUS "Detected Clang compiler")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(COMPILER_GCC TRUE)
    add_compile_definitions(COMPILER_GCC)
    message(STATUS "Detected GCC compiler")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(COMPILER_MSVC TRUE)
    add_compile_options("/Zc:__cplusplus" "/utf-8")
    add_compile_definitions(COMPILER_MSVC)
    message(STATUS "Detected MSVC compiler")
else ()
    message(FATAL_ERROR "Unsupported compiler '${CMAKE_CXX_COMPILER_ID}'")
endif ()

# Detect platform
if (WIN32)
    add_compile_definitions(PLATFORM_WINDOWS)
    link_libraries(kernel32.lib user32.lib)
    message(STATUS "Detected Windows platform")
elseif (APPLE)
    add_compile_definitions(PLATFORM_MACOS PLATFORM_UNIX)
    message(STATUS "Detected MacOS platform")
elseif (UNIX)
    if (NOT APPLE)
        add_compile_definitions(PLATFORM_LINUX)
    endif ()
    add_compile_definitions(PLATFORM_UNIX)
    message(STATUS "Detected Unixoid platform")
else ()
    message(FATAL_ERROR "Unsupported platform '${CMAKE_SYSTEM_NAME}'")
endif ()

# Detect build type
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_definitions(BUILD_DEBUG)
    set(BUILD_DEBUG ON)

    # Enable safe STL, disable inlining and optimizations
    if (PLATFORM_LINUX AND COMPILER_GCC)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0 -fno-inline -D_GLIBCXX_DEBUG_BACKTRACE")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O0 -fno-inline -D_GLIBCXX_DEBUG_BACKTRACE")
    endif ()

    # Enable checked iterators
    if (PLATFORM_WINDOWS AND COMPILER_MSVC)
        add_compile_definitions(_ITERATOR_DEBUG_LEVEL=1)
    endif ()
else ()
endif ()

# Detect bit size
if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    add_compile_definitions(CPU_64_BIT)
else ()
    add_compile_definitions(CPU_32_BIT)
endif ()
